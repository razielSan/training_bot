from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from repositories.diary import DiarySQLAlchemyRepository
from repositories.user import UserSQAlchemyRepository
from models import Calendar, Diary

from config import settings


def get_buttons_add_a_workout():
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ª–∏ –µ—â–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É."""
    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="workout_+")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="workout_-")],
        ]
    )

    return inline_kb


def get_calendar_days(
    day_week: int,
    calendar: Calendar,
    telegram: int,
    button_back=True,
    button_forward=True,
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å c –ø–æ–º–µ—á–∞–Ω–Ω—ã–º –Ω–∞ –Ω–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º–∏ –¥–Ω—è–º–∏."""
    user = UserSQAlchemyRepository().get_user(telegram=telegram)

    list_days = DiarySQLAlchemyRepository().get_list_day_for_diary(
        year=calendar.year,
        month=calendar.month,
        user_id=user.id,
    )

    inline_keyboard = InlineKeyboardBuilder()

    for day in settings.day_week:
        inline_keyboard.button(text=day, callback_data=day)

    count = 0

    for i in range(0, day_week):
        inline_keyboard.button(text="*", callback_data=f"{i}")
        count += 1

    for day in range(1, calendar.count_days + 1):
        if not list_days:
            inline_keyboard.button(text=f"{day}", callback_data=f"{day}")
        else:
            if day in list_days:
                inline_keyboard.button(
                    text="üí™",
                    callback_data=f"diary {calendar.year}.{calendar.month}.{day}",
                )
            else:
                inline_keyboard.button(text=f"{day}", callback_data=f"{day}")
        count += 1

    if count % 7:
        data = count % 7
        count = 7 - data
        for i in range(count):
            inline_keyboard.button(text="*", callback_data=f"{count}")

    inline_keyboard.adjust(7)

    button1 = InlineKeyboardButton(
        text="üëà  –ù–∞–∑–∞–¥",
        callback_data=f"calendar - {calendar.year}.{calendar.month}",
    )
    button2 = InlineKeyboardButton(
        text="–í–ø–µ—Ä–µ–¥  üëâ",
        callback_data=f"calendar + {calendar.year}.{calendar.month}",
    )

    buttons_list = []
    if button_back:
        buttons_list.append(button1)
    if button_forward:
        buttons_list.append(button2)

    inline_keyboard.row(*buttons_list)

    return inline_keyboard.as_markup()


def get_buttons_by_diary(
    diary: Diary,
    completed: bool,
    back_button=True,
    forward_button=True,
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∏ –≤–ø–µ—Ä–µ–¥ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞."""
    inline_kb = InlineKeyboardBuilder()

    if back_button:
        inline_kb.add(
            InlineKeyboardButton(
                text="üëà  –ù–∞–∑–∞–¥",
                callback_data=f"diary - {diary.date.year}.{diary.date.month}.{diary.date.day}.{diary.date.hour}",
            )
        )

    if forward_button:
        inline_kb.add(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥  üëâ",
                callback_data=f"diary + {diary.date.year}.{diary.date.month}.{diary.date.day}.{diary.date.hour}",
            )
        )
    if not completed:
        inline_kb.row(
            InlineKeyboardButton(
                text="–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
                callback_data=f"start_training {diary.training_count}.{diary.date.year}.{diary.date.month}.{diary.date.day}.{diary.date.hour}",
            ),
        )
    else:
        inline_kb.row(
            InlineKeyboardButton(
                text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ",
                callback_data=f"info_training {diary.training_count}.{diary.date.year}.{diary.date.month}.{diary.date.day}.{diary.date.hour}",
            ),
        )

    inline_kb.row(
        InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
            callback_data=f"delete {diary.training_count}.{diary.date.year}.{diary.date.month}.{diary.date.day}.{diary.date.hour}",
        ),
    )

    # inline_kb.adjust(2, 1, 1)
    return inline_kb.as_markup()


def get_buttons_add_a_approach():
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ª–∏ –æ–¥–∏–Ω –ø–æ–≤—Ç–æ—Ä."""
    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="approach_+")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="approach_-")],
        ]
    )

    return inline_kb
